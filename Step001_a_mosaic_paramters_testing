//scrip de teste para gerar mosaicos e testar datas limites
var gridFeatureCollection = ee.FeatureCollection("projects/MapBiomas_Pampa/ANCILLARY_DATA/CartasPampaTrinacional")
var pontos = ee.FeatureCollection("projects/MapBiomas_Pampa/ANCILLARY_DATA/CartasPampaTrinacional_pts")
var limite_tri = ee.FeatureCollection("projects/MapBiomas_Pampa/ANCILLARY_DATA/LimitePampaTrinacional_Buffer")
//print(table) 
/*
//Argentina exclusivas
"SH-20-Y-D", "SH-20-Z-A", "SH-20-Z-B", "SH-20-Z-C", "SH-20-Z-D", "SH-21-Y-A", "SH-21-Y-C", "SI-19-X-B",
"SI-19-X-D", "SI-19-Z-B", "SI-19-Z-D", "SI-20-V-A", "SI-20-V-B", "SI-20-V-C", "SI-20-V-D", "SI-20-X-A",
"SI-20-X-B", "SI-20-X-C", "SI-20-X-D", "SI-20-Y-A", "SI-20-Y-B", "SI-20-Y-C", "SI-20-Y-D", "SI-20-Z-A",
"SI-20-Z-B", "SI-20-Z-C", "SI-20-Z-D", "SI-21-V-A", "SI-21-V-C", "SI-21-Y-A", "SI-21-Y-C","SI-21-Y-D",
"SJ-19-X-B","SJ-19-X-D", "SJ-20-V-A", "SJ-20-V-B", "SJ-20-V-C", "SJ-20-V-D", "SJ-20-X-A", "SJ-20-X-B",
"SJ-20-X-C", "SJ-20-X-D", "SJ-20-Y-A", "SJ-20-Y-B", "SJ-20-Z-A", "SJ-20-Z-B", "SJ-20-Z-C", "SJ-20-Z-D",
"SJ-21-V-A", "SJ-21-V-B", "SJ-21-V-C", "SJ-21-V-D", "SJ-21-X-A", "SJ-21-X-C", "SJ-21-Y-A", "SJ-21-Y-B"
//Argentina compartidas
"SH-21-Y-B", "SH-21-Y-D", "SI-21-V-B", "SI-21-V-D", "SI-21-Y-B" 

//Uruguay exclusivas 
"SI-21-X-A", "SI-21-X-B", "SI-21-X-C", "SI-21-X-D", "SI-21-Z-A", "SI-21-Z-B", "SI-22-Y-A"
//Uruguay compartidas
"SH-21-Y-B","SH-21-Y-D","SH-21-Z-A","SH-21-Z-B","SH-21-Z-C","SH-21-Z-D","SH-22-Y-C","SI-21-V-B",
"SI-21-V-D","SI-21-Y-B","SI-22-V-A","SI-22-V-C"

//Brasil exclusivas 
"SH-22-V-D", "SH-22-V-B", "SH-22-Y-B", "SH-22-V-C", "SH-22-V-A", "SI-22-V-B", "SH-22-Y-D", "SH-21-X-C",
"SH-21-Y-B", "SH-21-V-D", "SH-21-X-B", "SH-22-Y-A", "SH-21-X-D", "SH-21-X-A", "SH-22-X-C", "SG-21-Z-D",
"SH-22-Z-A", "SH-22-Z-C", "SG-22-Y-D", "SG-22-Y-C"
//Brasil compartidas
"SH-21-Z-A","SH-21-Z-C", "SH-22-Y-C", "SI-22-V-A", "SI-22-V-C","SH-21-Z-D", "SH-21-Z-B"
*/
var cartasBR = [
"SH-21-Y-B","SH-21-Z-A"
//"SH-21-X-A", "SH-21-X-B", "SH-22-V-A", "SH-21-V-D",
//"SH-21-X-C", "SH-21-X-D", "SH-22-V-C", "SH-22-V-D",
//"SH-22-X-C", "SH-21-Y-B", "SH-21-Z-A", "SH-21-Z-B",
//"SH-22-Y-A", "SH-22-Y-B", "SH-22-Z-A", "SH-21-Z-C",
//"SH-21-Z-D", "SH-22-Y-C", "SH-22-Y-D", "SH-22-Z-C",
//"SI-22-V-A","SI-22-V-B", "SI-22-V-C"
]
var cartasAR = [
"SH-21-Y-D"  
//"SH-20-Z-C","SH-20-Z-D","SH-21-Y-A","SH-21-Y-B",
//"SH-21-Y-C","SH-21-Y-D","SI-19-Z-B","SI-19-Z-D","SI-20-V-B","SI-20-V-C","SI-20-V-D","SI-20-X-A",
//"SI-20-X-B","SI-20-X-C","SI-20-X-D","SI-20-Y-A","SI-20-Y-B","SI-20-Y-C","SI-20-Y-D","SI-20-Z-A",
//"SI-20-Z-B","SI-20-Z-C","SI-20-Z-D","SI-21-V-A","SI-21-V-B","SI-21-V-C","SI-21-V-D","SI-21-Y-A",
//"SI-21-Y-B","SI-21-Y-C","SI-21-Y-D","SJ-19-X-B","SJ-19-X-D","SJ-20-V-A","SJ-20-V-B","SJ-20-V-C",
//"SJ-20-V-D","SJ-20-X-A","SJ-20-X-B","SJ-20-X-C","SJ-20-X-D","SJ-20-Y-B","SJ-20-Z-A","SJ-20-Z-B",
//"SJ-20-Z-C","SJ-20-Z-D","SJ-21-V-A","SJ-21-V-B","SJ-21-V-C","SJ-21-V-D","SJ-21-X-A","SJ-21-X-C",
//"SJ-21-Y-A","SJ-21-Y-B"
]

var cartasUY = [
"SH-21-Z-A"  
//"SH-21-Y-B","SH-21-Y-D","SH-21-Z-A","SH-21-Z-C",
//"SH-21-Z-D","SI-21-V-B","SI-21-V-D","SI-21-X-A",
//"SI-21-X-B","SI-21-X-C","SI-21-X-D","SI-21-Y-B",
//"SI-21-Z-A","SI-21-Z-B","SI-22-V-A","SI-22-V-C",
//"SI-22-Y-A"
]

var cartas = ['SI-21-Z-B']
  
var dirasset = 'projects/MapBiomas_Pampa/ANCILLARY_DATA/MOSAIC/Mosaic_temp';
//var carta = 'SE-21-X-C';
//var anos = ['1985','1986','1987','1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017'];
//var sensores = ['L5','L5','L5','L5','L5','L5','L5','L5','L5','L5','L5','L5','L5','L5','L5','L7','L7','L7','L5','L5','L5','L5','L5','L5','L5','L5','L5','L7','L8','L8','L8','L8','L8'];

//var anos = ['2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017'];
//var sensores = ['L7','L7','L7','L5','L5','L5','L5','L5','L5','L5','L5','L5','L7','L8','L8','L8','L8','L8'];

var anos = ['2002'];
var sensores = ['L7'];

var month_ini = '09';
var month_fim = '11';

var buffer_carta = 100;

var dry_percent = 25;
var wet_percent = 75;

var cc = 90;

var fill_gap_ano = true;

var biome = 'PAMPATRI';
var collection = 1

var image_wet_visible = false; // true ou false add median wet landsat image visible
var image_dry_visible = false; // true ou false add median dry landsat image visible
var image_year_visible = true;  // true ou false add median year landsat image visible


var filtro_nuvem_adicionar = true; // true ou false to add another cloud filter
var adiciona_temas = false; // true ou false to add layers to Map

/*

cloudThresh: If using the cloudScoreTDOMShift method-Threshold for cloud 
    masking (lower number masks more clouds.  Between 10 and 30 generally 
    works best)
    
dilatePixels: Number of pixels to buffer clouds and cloud 
    shadows by (1 or 2 generally is sufficient)
    
cloudHeights: Height of clouds to use to project cloud shadows
 
zScoreThresh: Threshold for cloud shadow masking- lower number masks out 
    less.  Between -0.8 and -1.2 generally works well
    
shadowSumThresh: Sum of IR bands to include as shadows within TDOM and the 
    shadow shift method (lower number masks out less)
    
*/
var cloudThresh = 30;
var dilatePixels = 1;
var cloudHeights = ee.List.sequence(200,5000,500);
var zScoreThresh = -1;
var shadowSumThresh = 0.5;

//
var landgrid = ee.FeatureCollection("projects/MapBiomas_Pampa/ANCILLARY_DATA/gradetm_amsul");
//ee.FeatureCollection('ft:1qNHyIqgUjShP2gQAcfGXw-XoxWwCRn5ZXNVqKIS5');
//Map.addLayer(landgrid)

//print(landgrid)
//var gridFeatureCollection1 = ee.FeatureCollection('ft:1wCmguQD-xQs2gMH3B-hdOdrwy_hZAq4XFw1rU8PN');

//Get Geometry form Grid


///////////////////////////
//FUNCTION: cloudMask LX
var cloudMaskLX = function(image){
  var cfmask_conf = ee.Image(image.select(['BQA']));
  var image = image.mask(cfmask_conf.eq(672));
  return image;
};

///////////////////////////
//FUNCTION: cloudMask L8
var cloudMaskL8 = function(image){
  var cfmask_conf = ee.Image(image.select(['BQA']));
  var image = image.mask(cfmask_conf.eq(2720));
  return image;
};

///////////////////////////
//FUNCTION: acquiring Landsat TOA image collection
function getImageCollection(limite,startDate,endDate,sensor,cc){
  var ls;var l4TOAs;var l5TOAs;var l7TOAs;var l8TOAs;var out;
  
  var sensorBandDictLandsatTOA = ee.Dictionary({
                        L8 : ee.List([1,2,3,4,5,9,6,'BQA']),
                        L7 : ee.List([0,1,2,3,4,5,7,'BQA']),
                        L5 : ee.List([0,1,2,3,4,5,6,'BQA']),
                        L4 : ee.List([0,1,2,3,4,5,6,'BQA'])
  });
  var bandNamesLandsatTOA = ee.List(['blue','green','red','nir','swir1','temp','swir2','BQA']);

  l5TOAs = ee.ImageCollection('LANDSAT/LT05/C01/T1_TOA')
      .filterDate(startDate,endDate)
      .filterBounds(limite)
      .filterMetadata("CLOUD_COVER", "less_than", cc)
//      .filterMetadata("GEOMETRIC_RMSE_MODEL", "greater_than", 7.5)
      .select(sensorBandDictLandsatTOA.get('L5'), bandNamesLandsatTOA);
//  print(l5TOAs)    
  
  l8TOAs = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')
      .filterDate(startDate,endDate)
      .filterBounds(limite)
      .filterMetadata("CLOUD_COVER", "less_than", cc)
      .select(sensorBandDictLandsatTOA.get('L8'), bandNamesLandsatTOA);

  l7TOAs = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')
      .filterDate(startDate,endDate)
      .filterBounds(limite)
      .filterMetadata("CLOUD_COVER", "less_than", cc)
      .select(sensorBandDictLandsatTOA.get('L7'), bandNamesLandsatTOA);

  if (sensor == 'L7') {
    ls = l7TOAs;
  } else if (sensor == 'L5') {
    ls = l5TOAs;
  } else if (sensor == 'LX') {
    ls = ee.ImageCollection(l5TOAs.merge(l7TOAs));
    } else {
    ls = l8TOAs;
  }

  out = ls;
  
  return out;
}

///////////////////////////
//FUNCTION: Border Remove
var clip_cena = function(img){
    //var tile = ee.String('T').cat(ee.String(img.get('WRS_PATH'))).cat(ee.String('0')).cat(ee.String(img.get('WRS_ROW')));
    //
   var limite_img = landgrid.filterMetadata('ORBITA', 'equals',  img.get('WRS_PATH'))
                            .filterMetadata('PONTO', 'equals', img.get('WRS_ROW'))

   //var limite_img = landgrid.filterMetadata('TILE_T', 'equals', tile);
		return img.clip(limite_img.map(function(poli){return poli.buffer(1000)}));
  };

///////////////////////////
//FUNCTION: Create NDVI index
var NDVI = function(image) {
    var ndvi = image.expression('float(nir - red)/(nir + red)', {
        'nir': image.select('nir'),
        'red': image.select('red')
    }).multiply(100).byte(); // rescale NDVI from 0-200
  image = image.addBands(ndvi.select([0],['NDVI']));
  return image;
};


/*
=========================================================================================
FUNCTION NAME:  cloudMask
=========================================================================================
*/

///////////////////////////////////////////////////////////////////////////////
// A helper to apply an expression and linearly rescale the output.
// Used in the landsatCloudScore function below.
var rescale = function(img, exp, thresholds) {
  return img.expression(exp, {img: img})
      .subtract(thresholds[0]).divide(thresholds[1] - thresholds[0]);
};

///////////////////////////////////////////////////////////////////////////////
// Compute a cloud score and adds a band that represents the cloud mask.  
// This expects the input image to have the common band names: 
// ["red", "blue", etc], so it can work across sensors.
function landsatCloudScore(img) {

  // Compute several indicators of cloudiness and take the minimum of them.
  var score = ee.Image(1.0);
  // Clouds are reasonably bright in the blue band.
  score = score.min(rescale(img, 'img.blue', [0.1, 0.3]));
 
  // Clouds are reasonably bright in all visible bands.
  score = score.min(rescale(img, 'img.red + img.green + img.blue', [0.2, 0.8]));
   
  // Clouds are reasonably bright in all infrared bands.
  score = score.min(
      rescale(img, 'img.nir + img.swir1 + img.swir2', [0.3, 0.8]));

  // Clouds are reasonably cool in temperature.
  score = score.where(img.select(['temp']).mask(),score.min(rescale(img,
      'img.temp', [300, 290])));

  // However, clouds are not snow.
  var ndsi = img.normalizedDifference(['green', 'swir1']);
  score =  score.min(rescale(ndsi, 'img', [0.8, 0.6])).multiply(100).byte();
  score = score.lt(cloudThresh).rename('cloudMask');
  img = img.updateMask(img.mask().and(score));
  return img.addBands(score);
}

///////////////////////////////////////////////////////////////////////////////
//Function for finding dark outliers in time series.
//Original concept written by Carson Stam and adapted by Ian Housman.
//Adds a band that is a mask of pixels that are dark, and dark outliers.
function simpleTDOM2(collection,zScoreThresh,shadowSumThresh,dilatePixels){
  var shadowSumBands = ['nir','swir1'];
  
  //Get some pixel-wise stats for the time series
  var irStdDev = collection.select(shadowSumBands).reduce(ee.Reducer.stdDev());
  var irMean = collection.select(shadowSumBands).mean();
  
  //Mask out dark dark outliers
  collection = collection.map(function(img){
    var zScore = img.select(shadowSumBands).subtract(irMean).divide(irStdDev);
    var irSum = img.select(shadowSumBands).reduce(ee.Reducer.sum());
    var TDOMMask = zScore.lt(zScoreThresh).reduce(ee.Reducer.sum()).eq(2)
        .and(irSum.lt(shadowSumThresh)).not();
    TDOMMask = TDOMMask.focal_min(dilatePixels);
    return img.addBands(TDOMMask.rename('TDOMMask'));
  });
  
  return collection;
}
///////////////////////////////////////////////////////////////////////////////
//Function to clip with grid limit

var clipcarta = function(image) {
return  image.clip(limite);
};

///////////////////////////////////////////////////////////////////////////////
//Function for wrapping cloud and shadow masking together.
//Assumes image has cloud mask band called "cloudMask" and a TDOM mask called 
//"TDOMMask".
function cloudProject(img,shadowSumThresh,dilatePixels,cloudHeights){
  
  //Get the cloud mask
  var cloud = img.select('cloudMask').not();
  cloud = cloud.focal_max(dilatePixels);
  cloud = cloud.updateMask(cloud);
  
  //Get TDOM mask
  var TDOMMask = img.select(['TDOMMask']).not();
  
  //Project the shadow finding pixels inside the TDOM mask that are dark and 
  //inside the expected area given the solar geometry
  //Find dark pixels
  var darkPixels = img.select(['nir','swir1','swir2'])
      .reduce(ee.Reducer.sum()).lt(shadowSumThresh);//.gte(1);
  
  //Get scale of image
  var nominalScale = cloud.projection().nominalScale();

  //Find where cloud shadows should be based on solar geometry
  //Convert to radians
  var meanAzimuth = img.get('SUN_AZIMUTH');
  var meanZenith = img.get('SUN_ELEVATION');
  var azR = ee.Number(meanAzimuth).multiply(Math.PI).divide(180.0)
      .add(ee.Number(0.5).multiply(Math.PI ));
  var zenR = ee.Number(0.5).multiply(Math.PI )
      .subtract(ee.Number(meanZenith).multiply(Math.PI).divide(180.0));
  
  //Find the shadows
  var shadows = cloudHeights.map(function(cloudHeight){
    cloudHeight = ee.Number(cloudHeight);
    var shadowCastedDistance = zenR.tan()
        .multiply(cloudHeight);//Distance shadow is cast
    var x = azR.cos().multiply(shadowCastedDistance)
        .divide(nominalScale).round();//X distance of shadow
    var y = azR.sin().multiply(shadowCastedDistance)
        .divide(nominalScale).round();//Y distance of shadow
    return cloud.changeProj(cloud.projection(), cloud.projection()
        .translate(x, y));
  });

  var shadow = ee.ImageCollection.fromImages(shadows).max();
 
  //Create shadow mask
  shadow = shadow.updateMask(shadow.mask().and(cloud.mask().not()));
  shadow = shadow.focal_max(dilatePixels);
  shadow = shadow.updateMask(shadow.mask().and(darkPixels).and(TDOMMask));

  //Combine the cloud and shadow masks
  var combinedMask = cloud.mask().or(shadow.mask()).eq(0);
  
  //Update the image's mask and return the image
  img = img.updateMask(img.mask().and(combinedMask));
  img = img.addBands(combinedMask.rename(['cloudShadowMask']));
  return img;
}

///////////////////////////
// Create Symbol palets
var ndfi_color = 
  'FFFFFF,FFFCFF,FFF9FF,FFF7FF,FFF4FF,FFF2FF,FFEFFF,FFECFF,FFEAFF,FFE7FF,FFE5FF,FFE2FF,FFE0FF,FFDDFF,FFDAFF,FFD8FF,FFD5FF,FFD3FF,FFD0FF,FFCEFF,FFCBFF,FFC8FF,FFC6FF,FFC3FF,FFC1FF,FFBEFF,FFBCFF,FFB9FF,FFB6FF,FFB4FF,FFB1FF,FFAFFF,FFACFF,FFAAFF,FFA7FF,FFA4FF,FFA2FF,FF9FFF,FF9DFF,FF9AFF,FF97FF,FF95FF,FF92FF,FF90FF,FF8DFF,FF8BFF,FF88FF,FF85FF,FF83FF,FF80FF,FF7EFF,FF7BFF,FF79FF,FF76FF,FF73FF,FF71FF,FF6EFF,FF6CFF,FF69FF,FF67FF,'+
  'FF64FF,FF61FF,FF5FFF,FF5CFF,FF5AFF,FF57FF,FF55FF,FF52FF,FF4FFF,FF4DFF,FF4AFF,FF48FF,FF45FF,FF42FF,FF40FF,FF3DFF,FF3BFF,FF38FF,FF36FF,FF33FF,FF30FF,FF2EFF,FF2BFF,FF29FF,FF26FF,FF24FF,FF21FF,FF1EFF,FF1CFF,FF19FF,FF17FF,FF14FF,FF12FF,FF0FFF,FF0CFF,FF0AFF,FF07FF,FF05FF,FF02FF,FF00FF,FF00FF,FF0AF4,FF15E9,FF1FDF,FF2AD4,FF35C9,FF3FBF,FF4AB4,FF55AA,FF5F9F,FF6A94,FF748A,FF7F7F,FF8A74,FF946A,FF9F5F,FFAA55,FFB44A,FFBF3F,FFC935,'+
  'FFD42A,FFDF1F,FFE915,FFF40A,FFFF00,FFFF00,FFFB00,FFF700,FFF300,FFF000,FFEC00,FFE800,FFE400,FFE100,FFDD00,FFD900,FFD500,FFD200,FFCE00,FFCA00,FFC600,FFC300,FFBF00,FFBB00,FFB700,FFB400,FFB000,FFAC00,FFA800,FFA500,FFA500,F7A400,F0A300,E8A200,E1A200,D9A100,D2A000,CA9F00,C39F00,BB9E00,B49D00,AC9C00,A59C00,9D9B00,969A00,8E9900,879900,7F9800,789700,709700,699600,619500,5A9400,529400,4B9300,439200,349100,2D9000,258F00,1E8E00,'+
  '168E00,0F8D00,078C00,008C00,008C00,008700,008300,007F00,007A00,007600,007200,006E00,006900,006500,006100,005C00,005800,005400,005000,004C00';
var visNDFI = {'min':0, 'max':200, 'palette':ndfi_color};
var visNDFI100 = {'min':0, 'max':100, 'palette':ndfi_color};
var vizParams = {'min': 0.00,'max': 0.40, 'bands':'swir1,nir,red','gamma':1.0};
var visPar = {'bands':['swir1','nir','red'], 'gain':[800,600,2000],'gamma':0.5 };
var visParMedian = {'bands':['swir1med_year','nirmed_year','redmed_year'], 'gain':[0.08, 0.06,0.2],'gamma':0.5 };
var visParMax = {'bands':['swir1max','nirmax','redmax'], 'gain':[0.08, 0.06,0.2],'gamma':0.5 };
var visParMin = {'bands':['swir1min','nirmin','redmin'], 'gain':[0.08, 0.06,0.2],'gamma':0.5 };
var visSMA  = {'bands':['medSoil', 'medGV', 'medNPV'], 'gain': [6.0,4.0,6.0]};


///////////////////////////
//MAIN SCRIPT - Create asset for each year
///////////////////////////////////////////////////////////////////////////////

///////////////////////////
//FUNCTION: LOOP for each carta
for (var i_carta=0;i_carta<cartas.length; i_carta++){
  var carta = cartas[i_carta];
  //var limite1 = gridFeatureCollection1.filterMetadata('name', "equals", carta);
  //print(limite1)
  var limite = gridFeatureCollection.filterMetadata('COD_INT', "equals", carta);
  //print(limite)
  //Map.addLayer(limite)
  if (buffer_carta > 0) {
    limite = limite.map(function(carta){return carta.buffer(buffer_carta)});
  }

  ///////////////////////////
  //FUNCTION: LOOP for each year
  for (var i_ano=0;i_ano<anos.length; i_ano++){
    var ano = anos[i_ano];
    var sensor = sensores[i_ano];
    
    var Year = parseInt(ano);
    var earlyYear = parseInt(ano - 1); 
    
    var IC_period1 = getImageCollection(limite,Year+'-'+month_ini+'-01',Year+'-'+month_fim+'-30',sensor, cc);
    var IC_year = getImageCollection(limite,Year+'-01-01',Year+'-12-30',sensor, cc);

    if (filtro_nuvem_adicionar === true) {
      IC_period1 = IC_period1.map(landsatCloudScore);
      IC_period1 = simpleTDOM2(IC_period1,zScoreThresh,shadowSumThresh,dilatePixels);
      IC_period1 = IC_period1.map(function(img){return cloudProject(img,shadowSumThresh,dilatePixels, cloudHeights)});
      IC_period1 = IC_period1.map(clipcarta);
  
    } else {
      IC_period1 = IC_period1.map(clipcarta); 
    }
  
    if (filtro_nuvem_adicionar === true) {
      IC_year = IC_year.map(landsatCloudScore)
      IC_year = simpleTDOM2(IC_year,zScoreThresh,shadowSumThresh,dilatePixels);
      IC_year = IC_year.map(function(img){return cloudProject(img,shadowSumThresh,dilatePixels, cloudHeights)});
      IC_year = IC_year.map(clipcarta);
    } else {
      IC_year = IC_year.map(clipcarta); 
    }

  
    //Aplly filter using BQA
    if (sensor == 'L8') {
      IC_period1 = IC_period1.map(cloudMaskL8);
      IC_year = IC_year.map(cloudMaskL8);
    } else {
      IC_period1 = IC_period1.map(cloudMaskLX);
      IC_year = IC_year.map(cloudMaskLX)
    }
  
    //remove border of landsat image
    IC_period1 = IC_period1.map(clip_cena);
    IC_year = IC_year.map(clip_cena);

  
    //Add NDVI to image collection
    IC_period1 = IC_period1.map(NDVI);
    IC_year = IC_year.map(NDVI);
    
//    IC_period1 = IC_period1.map(AddIndex)
//    IC_year = IC_year.map(AddIndex)
    
  
  //print(IC_year)
  
    // Generate Dry and Wet collection with percentile
    var p25Ndvi = IC_year.select(['NDVI']).reduce(ee.Reducer.percentile([dry_percent]));
    var p75Ndvi = IC_year.select(['NDVI']).reduce(ee.Reducer.percentile([wet_percent]));
    
    var wetSeason = function(image) {
      var seasonMask = image.select('NDVI').gte(p75Ndvi);
      return image.mask(seasonMask);
    };
    
    var drySeason = function(image) {
      var seasonMask = image.select('NDVI').lte(p25Ndvi);
      return image.mask(seasonMask);
    };
  
    var IC_umido = IC_year.map(wetSeason);
    var IC_seco = IC_year.map(drySeason);
  
    // Get Median
    var IC_period1_Median = IC_period1.median();
    var IC_year_Median = IC_year.median();
    var IC_dry_Median = IC_seco.median();
    var IC_wet_Median = IC_umido.median();
  
    // Fill cloud gaps with Year mosaic
    var IC_period_Median = IC_period1_Median.unmask(IC_year_Median);
  
    // Get Min, Max, Amp and Std from Year image
    var IC_year_Min = IC_year.min();
    var IC_year_Max = IC_year.max();
    var IC_year_Amp = IC_year_Max.subtract(IC_year_Min);
    var IC_year_Std = IC_year.reduce(ee.Reducer.stdDev());

    //Create new image to add new bands
    var img_asset = IC_period_Median.select(['blue'],['median_blue']).multiply(10000).uint16();
    var img_asset_temp = IC_period_Median.select(['blue'],['median_blue']).multiply(10000).uint16();
    
    // Add Median values to image bands
    img_asset = img_asset.addBands(IC_period_Median.select(['green'],['median_green']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_period_Median.select(['red'],['median_red']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_period_Median.select(['nir'],['median_nir']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_period_Median.select(['swir1'],['median_swir1']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_period_Median.select(['swir2'],['median_swir2']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_period_Median.select(['temp'],['median_temp']).multiply(10000).uint16());
  
    img_asset_temp = img_asset.addBands(IC_period_Median.select(['green'],['median_green']).multiply(10000).uint16());
    img_asset_temp = img_asset.addBands(IC_period_Median.select(['red'],['median_red']).multiply(10000).uint16());
    img_asset_temp = img_asset.addBands(IC_period_Median.select(['nir'],['median_nir']).multiply(10000).uint16());
    img_asset_temp = img_asset.addBands(IC_period_Median.select(['swir1'],['median_swir1']).multiply(10000).uint16());
    img_asset_temp = img_asset.addBands(IC_period_Median.select(['swir2'],['median_swir2']).multiply(10000).uint16());
    
    // Add Median Wet values to image bands
    img_asset = img_asset.addBands(IC_wet_Median.select(['blue'],['median_blue_wet']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_wet_Median.select(['green'],['median_green_wet']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_wet_Median.select(['red'],['median_red_wet']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_wet_Median.select(['nir'],['median_nir_wet']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_wet_Median.select(['swir1'],['median_swir1_wet']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_wet_Median.select(['swir2'],['median_swir2_wet']).multiply(10000).uint16());
  //  img_asset = img_asset.addBands(IC_wet_Median.select(['temp'],['median_temp_wet']).multiply(10000).uint16());


      // Add Median Dry values to image bands
    img_asset = img_asset.addBands(IC_dry_Median.select(['blue'],['median_blue_dry']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_dry_Median.select(['green'],['median_green_dry']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_dry_Median.select(['red'],['median_red_dry']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_dry_Median.select(['nir'],['median_nir_dry']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_dry_Median.select(['swir1'],['median_swir1_dry']).multiply(10000).uint16());
    img_asset = img_asset.addBands(IC_dry_Median.select(['swir2'],['median_swir2_dry']).multiply(10000).uint16());

    // Add NDVI Year
    img_asset = img_asset.addBands(IC_period_Median.select(['NDVI']).select([0],['median_ndvi']).uint8());
    img_asset = img_asset.addBands(IC_year_Amp.select(['NDVI'],['amp_ndvi']).uint8());
    img_asset = img_asset.addBands(IC_year_Std.select(['NDVI_stdDev'],['stdDev_ndvi']).uint32());
  
    img_asset = img_asset.addBands(IC_dry_Median.select(['NDVI']).select([0],['median_ndvi_dry']).uint8());
    img_asset = img_asset.addBands(IC_wet_Median.select(['NDVI']).select([0],['median_ndvi_wet']).uint8());
    
  if (adiciona_temas === true){
  
    Map.addLayer(img_asset, {'bands':['median_ndvi_dry' ],'min':30, 'max':80, 'palette':ndfi_color}, 'NDVI med seco'+ano, false);
    Map.addLayer(img_asset, {'bands':['median_ndvi_wet'],'min':30, 'max':80, 'palette':ndfi_color}, 'NDVI med umido'+ano, false);
    Map.addLayer(img_asset, {'bands':['median_ndvi' ],'min':30, 'max':80, 'palette':ndfi_color}, 'NDVI med year'+ano, false);
    Map.addLayer(img_asset, {'bands':['median_swir1_dry','median_nir_dry','median_red_dry' ], 'gain':[0.09, 0.07,0.2],'gamma':0.5 }, 'Median_dry'+ano, false);
    Map.addLayer(img_asset, {'bands':['median_swir1_wet','median_nir_wet','median_red_wet' ], 'gain':[0.09, 0.07,0.2],'gamma':0.5 }, 'Median_wet'+ano, false);

  
  
  }

  
   Map.addLayer(IC_period1_Median.multiply(10000).uint16(), {'bands':['swir1','nir','red' ], 'gain':[0.09, 0.07,0.2],'gamma':0.5 }, 'Median Preiod1 '+ano, false);
   Map.addLayer(img_asset, {'bands':['median_swir1','median_nir','median_red' ], 'gain':[0.09, 0.07,0.2],'gamma':0.5 }, 'Median year '+ano, image_year_visible);

    var imgemProp = img_asset_temp
        .set('year',parseInt(ano,10))
        .set('biome', biome)      
        .set('sensor', sensor)
        .set('collection', 1)

    Export.image.toAsset({image: imgemProp, description: biome+"-"+carta+"-"+sensor+"A"+ano, 
        assetId: dirasset+biome+"-"+carta+"-"+sensor+"A"+ano, scale: 30, pyramidingPolicy: {'.default': 'mode'}, maxPixels: 1e13, region: limite})
  }
}

//var gridFeatureCollection = ee.FeatureCollection('ft:1wCmguQD-xQs2gMH3B-hdOdrwy_hZAq4XFw1rU8PN');
//print(gridFeatureCollection);

//var biomas = ee.FeatureCollection('users/SEEGMapBiomas/bioma_1milhao_uf2015_250mil_IBGE_geo_v4_revisao_pampa_lagoas')

//var blank = ee.Image(0).mask(0);
//var outline = blank.paint(biomas, 'AA0000', 2); 
//var visPar = {'palette':'000000','opacity': 0.6};
//Map.addLayer(outline, visPar, 'Bioma', false);

var blank = ee.Image(0).mask(0);
var outline = blank.paint(gridFeatureCollection, 'AA0000', 2); 
var visPar = {'palette':'000000','opacity': 0.6};
Map.addLayer(outline, visPar, 'Cartas 1:250.000', false);


var blank = ee.Image(0).mask(0);
var outline = blank.paint(limite_tri, 'AA0000', 2); 
var visPar = {'palette':'000000','opacity': 0.6};
Map.addLayer(outline, visPar, 'Limite Tri', false);

Map.addLayer(pontos,{},'PontosCartas',false)

Map.centerObject(limite, 9);
