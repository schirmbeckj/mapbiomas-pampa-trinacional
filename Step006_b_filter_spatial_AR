/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometryPampa = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-65.3080116842848, -30.03890759888477],
          [-67.34626559681031, -31.919169308875865],
          [-69.39338282453521, -37.842574152792565],
          [-66.66633522247373, -40.37080055581033],
          [-64.50692355162379, -41.05023823588194],
          [-62.86763737314721, -41.262399035895314],
          [-56.37262192495654, -37.99875381705165],
          [-56.4051768183778, -34.81610492864667],
          [-57.45031349430538, -31.558912345617138],
          [-57.26052274415568, -30.208190107358124],
          [-58.38550467147517, -29.696222211321462],
          [-58.666223749915424, -28.04666590804792],
          [-59.686434762867144, -27.89670553290904],
          [-61.51746799174176, -27.799070370580928],
          [-62.6741961671148, -28.772888171412177],
          [-63.885513776614864, -29.610599470730843]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
 
var versionIn = 'v_2_gap'
var versionOut = 'v_2_esp'

//var regiao = '1';
//var regiao = '2';
//var regiao = '3';
var regiao = '4';
//var regiao = '5';
//var regiao = '6';
//var regiao = '7'; 
//var regiao = '8'; 
//var regiao = '9';


var dirout = 'projects/MapBiomas_Pampa/WORKSPACE/Argentina/IC_class_col1_filtros/'

var regioesCollection = ee.FeatureCollection('projects/MapBiomas_Pampa/ANCILLARY_DATA/Zonas_Pampa_ARG_buffer10km_Zona4manual')
var myRegion = regioesCollection.filterMetadata('idZona', 'equals', regiao) //region_ID

var palettes = require('users/mapbiomas/modules:Palettes.js');

// alterr

//var class4GAP =  ee.Image('projects/MapBiomas_Pampa/WORKSPACE/Uruguay/IC_Clasificaciones/'+ 'class_' + regiao + '_class_v_2') 
var class4GAP =  ee.Image(dirout + 'class_' + regiao + '_class_' + versionIn);

//var class4GAP = ee.Image('projects/mapbiomas-workspace/AMOSTRAS/col4/PAMPA/class_col4_filtros/'+ String(regiao) +'-RF85a18_v' + versionIn)
var palettes = require('users/mapbiomas/modules:Palettes.js');
var pal = palettes.get('classification2');
var vis5a = {
      bands: 'classification_2000',
     'min': 0, 'max': 45,  'palette': palettes.get('classification5')};
     
var vis5b = {
      'min': 0, 'max': 45,  'palette': palettes.get('classification5')};
      
Map.addLayer(class4GAP.select('classification_2019'), vis5b, 'Pre Filtro');

var ano = '2000'
var moda_00 = class4GAP.select('classification_' + ano).focal_mode(1, 'square', 'pixels')
moda_00 = moda_00.mask(class4GAP.select('connect_'+ano).lte(6))
var class_outTotal = class4GAP.select('classification_'+ano).blend(moda_00)
//var kernel = ee.Kernel.square(1)
//var neighs = class4GAP.select('classification_'+ano).neighborhoodToBands(kernel)//.mask(region)
//var majority = neighs.reduce(ee.Reducer.mode()).rename('classification_'+ano)

//print(class_outTotal)
//Map.addLayer(class_outTotal, vis5a, 'class1 MODA');

var anos = ['2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019'];
for (var i_ano=0;i_ano<anos.length; i_ano++){  
  var ano = anos[i_ano]; 
  var moda = class4GAP.select('classification_'+ano).focal_mode(1, 'square', 'pixels')
  moda = moda.mask(class4GAP.select('connect_'+ano).lte(6))
  var class_out = class4GAP.select('classification_'+ano).blend(moda)
  class_outTotal = class_outTotal.addBands(class_out)
}
print(class_outTotal)

Map.addLayer(class_outTotal.select('classification_2019'), vis5b, 'Pos Filtro');


Export.image.toAsset({
    'image': class_outTotal,
    'description': 'class_' + regiao + '_class_' + versionOut,
    'assetId': dirout + 'class_' + regiao + '_class_' + versionOut,
    'pyramidingPolicy': {
        '.default': 'mode'
    },
    'region': myRegion.geometry().bounds(),
    'scale': 30,
    'maxPixels': 1e13
});


//var anos3 = ['1985','1986','1987','1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018'];
////put "classification_2018 in the end of bands after gap fill
//var original = class4Gap.select('classification_1985')
//for (var i_ano=0;i_ano<anos3.length; i_ano++){  
//  var ano = anos3[i_ano]; 
//  original = original.addBands(class4Gap.select('classification_'+ano)) 
//}
//
//
//
////
//
//var majorityFilter(self, params) {
//
//   //Generate a mask from the class value
//   classMask = self.image.eq(params['classValue'])
//
//   //Labeling the group of pixels until 100 pixels connected
//   labeled = classMask.mask(classMask).connectedPixelCount(100, True)
//
//   //Select some groups of connected pixels
//   region = labeled.lt(params['maxSize'])
//
//   //Squared kernel with size shift 1
//   //[[p(x-1,y+1), p(x,y+1), p(x+1,y+1)]
//   //[ p(x-1,  y), p( x,y ), p(x+1,  y)]
//   //[ p(x-1,y-1), p(x,y-1), p(x+1,y-1)]
//   kernel = ee.Kernel.square(1)
//
//   //Find neighborhood
//   neighs = self.image.neighborhoodToBands(kernel).mask(region)
//
//   //Reduce to majority pixel in neighborhood
//   majority = neighs.reduce(ee.Reducer.mode())
//
//   //Replace original values for new values
//   filtered = self.image.where(region, majority)
//
//   return filtered.byte()
//}
//
////
//// MÃ©todo para reclassificar grupos de pixels de mesma classe agrupados
//// @param  {list<dictionary>} filterParams [{classValue: 1, maxSize: 3},{classValue: 2, maxSize: 5}]
//// @return {ee.Image}  Imagem classificada filtrada
////
//
//
//var spatialFilter(self, filterParams):
//    for params in filterParams:
//        self.image = self._majorityFilter(params)
//return self.image
//
